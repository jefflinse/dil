package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"strings"

	"github.com/jefflinse/tablecloth"
)

func main_old() {
	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, "main.go", nil, parser.AllErrors)
	if err != nil {
		panic(err)
	}

	for _, imp := range node.Imports {
		path := strings.Trim(imp.Path.Value, "\"")
		if !strings.Contains(path, ".") {
			continue
		}

		fmt.Printf("External dependency used: %s\n", path)

		for _, decl := range node.Decls {
			fmt.Println(decl)
			fn, ok := decl.(*ast.FuncDecl)
			if !ok {
				continue
			}

			for _, field := range fn.Type.Params.List {
				fmt.Println(field)
				if sel, ok := field.Type.(*ast.SelectorExpr); ok {
					if sel.Sel.Name == path {
						fmt.Printf("Function %s uses external dependency %s on line %d\n", fn.Name.Name, path, fset.Position(fn.Pos()).Line)
					}
				}
			}

			ast.Inspect(fn.Body, func(n ast.Node) bool {
				fmt.Println(n)
				switch x := n.(type) {
				case *ast.CallExpr:
					if sel, ok := x.Fun.(*ast.SelectorExpr); ok {
						if sel.Sel.Name == path {
							fmt.Printf("Function %s uses external dependency %s on line %d\n", fn.Name.Name, path, fset.Position(x.Pos()).Line)
						}
					}
				}
				return true
			})
		}
	}

}

func foo() {
	tablecloth.NewTable(1)
}
